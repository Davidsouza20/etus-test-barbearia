{"remainingRequest":"/home/david/Documents/barberShopFront/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/david/Documents/barberShopFront/src/views/EmployeeLogin.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/david/Documents/barberShopFront/src/views/EmployeeLogin.vue","mtime":1592454096919},{"path":"/home/david/Documents/barberShopFront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documents/barberShopFront/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/david/Documents/barberShopFront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documents/barberShopFront/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport api from '../services/api'\nexport default {\n    data() {\n        return {\n            name: '',\n            email: '',\n            phone: '',\n            errors: [],\n            response: '',\n            errorMessage: ''\n        }\n    },\n\n    methods: {\n        checkForm() {     \n            this.errors['email'] = !this.email || !this.validEmail(this.email) ? true : false;\n        },\n\n        validEmail: (email) => {\n            let isValid = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n            return isValid.test(email);\n        },\n\n        async login(e) {\n            e.preventDefault();\n        \n            if(this.errors['email'] == false) {\n                await api.get(`employee/${this.email}`)\n                .then(res => this.response = res.data)\n                .catch(err => console.log(err));  \n\n                if(this.response == 'Profissional não cadastrado') {\n                    this.errorMessage = this.response;       \n                } else {\n                    localStorage.setItem('employee_id', this.response.id);\n                    localStorage.setItem('employee_email', this.response.email);\n                    localStorage.setItem('employee_name', this.response.name);\n\n                    this.response = 'success';\n                    setTimeout(() => {\n                    window.location.href = '/relatorio';\n                    }, 500)    \n                } \n            }\n       }\n    }   \n}\n",{"version":3,"sources":["EmployeeLogin.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EmployeeLogin.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div id=\"employee\">\n       <h3>Login do Profissional</h3>\n\n       <div class=\"client-form\">\n           <form action=\"\">\n               <div class=\"form-group\">\n                    <input type=\"email\" class=\"form-control\" name=\"email\" placeholder=\"E-mail do Cliente\" v-model=\"email\" v-on:keyup=\"checkForm\">\n                </div>\n\n                <div v-if=\"errors['email'] == true\" class=\"alert alert-danger\" role=\"alert\">\n                    <span>Email inválido<br></span>\n                </div> \n\n                <button @click=\"login\" class=\"btn btn-dark\">Entrar</button>\n           </form>\n           <br>\n            <span v-if=\"errorMessage\" class=\"alert alert-danger\">{{ errorMessage }}<br></span>\n       </div>\n       <sweetalert-icon v-if=\"response == 'success'\" icon=\"success\" />   \n    </div>\n</template>\n\n\n<script>\nimport api from '../services/api'\nexport default {\n    data() {\n        return {\n            name: '',\n            email: '',\n            phone: '',\n            errors: [],\n            response: '',\n            errorMessage: ''\n        }\n    },\n\n    methods: {\n        checkForm() {     \n            this.errors['email'] = !this.email || !this.validEmail(this.email) ? true : false;\n        },\n\n        validEmail: (email) => {\n            let isValid = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n            return isValid.test(email);\n        },\n\n        async login(e) {\n            e.preventDefault();\n        \n            if(this.errors['email'] == false) {\n                await api.get(`employee/${this.email}`)\n                .then(res => this.response = res.data)\n                .catch(err => console.log(err));  \n\n                if(this.response == 'Profissional não cadastrado') {\n                    this.errorMessage = this.response;       \n                } else {\n                    localStorage.setItem('employee_id', this.response.id);\n                    localStorage.setItem('employee_email', this.response.email);\n                    localStorage.setItem('employee_name', this.response.name);\n\n                    this.response = 'success';\n                    setTimeout(() => {\n                    window.location.href = '/relatorio';\n                    }, 500)    \n                } \n            }\n       }\n    }   \n}\n</script>\n\n\n<style scoped>\n    *{\n        height: 100%;\n        min-height: 100%;\n        margin-top: 25px;\n        font-family: 'Roboto300', sans-serif;\n    }\n   \n    .client-form {\n        margin: 20px auto;\n        max-width: 500px;\n        width: 95%;\n        height: 400;\n        color: #ffff;\n        padding: 10px;\n        font-family: cursive;\n        border-radius: 15px;\n        cursor: pointer;\n\n    }\n\n</style>"]}]}