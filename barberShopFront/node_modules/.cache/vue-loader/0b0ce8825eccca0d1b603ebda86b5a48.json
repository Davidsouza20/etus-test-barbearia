{"remainingRequest":"/home/david/Documents/barberShopFront/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/david/Documents/barberShopFront/src/views/Servico.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/david/Documents/barberShopFront/src/views/Servico.vue","mtime":1592337640229},{"path":"/home/david/Documents/barberShopFront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documents/barberShopFront/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/david/Documents/barberShopFront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documents/barberShopFront/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport api from '../services/api'\nimport Loading from 'vue-loading-overlay'\nimport 'vue-loading-overlay/dist/vue-loading.css'\nexport default {\n    name: 'Login',\n    components: {\n            Loading\n    },\n    data() {\n        return {\n            fullPage: true,\n            isLoading: false,\n            email: \"\",\n            password: \"\",\n            response: \"\",\n            error: false,\n        }\n    },\n    methods: {\n        async login() {\n            const auth_user = {\n                email: this.email,\n                password: this.password\n            }\n            const data = Object.entries(auth_user)\n            .map(([key, val]) => `${key}=${encodeURIComponent(val)}`)\n            .join(\"&\");\n            \n            if(this.email != '' && this.password != '') {   \n                this.isLoading = true;  \n                await api.post(`/auth`, data)\n                .then(res =>  (this.response = res.data))\n                .catch(err => console.log(err));  \n                this.isLoading = false;\n                if (!this.response.error) {\n                    localStorage.setItem('user_id', this.response.user._id);\n                    localStorage.setItem('token', this.response.token);\n                    //window.location.href = \"http://localhost:8080/aulas\";\n                    window.location.href = \"/aulas\";\n                }\n                \n                //console.log(this.response);    \n            } else {\n               this.error = true;\n            }              \n        },\n    },\n}\n",{"version":3,"sources":["Servico.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Servico.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div id=\"login\">\n        <h4 class=\"modal-title w-100 font-weight-bold\">Entrar</h4>\n        <div class=\"form-group\">\n            <i class=\"fa fa-envelope-o\" aria-hidden=\"true\"></i>\n            <input type=\"email\" required class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"E-mail\" v-model=\"email\">\n            \n        </div>\n        <div class=\"form-group\">\n            <i class=\"fa fa-lock\" aria-hidden=\"true\"></i>\n            <input type=\"password\" required class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Senha\" v-model=\"password\">\n        </div>\n        \n        <div v-if=\"response.error\" class=\"alert alert-danger\" role=\"alert\">\n            {{ response.error }}\n        </div>\n        <div v-else-if=\"error\" class=\"alert alert-danger\" role=\"alert\">\n            Insira E-mail e Senha\n        </div>\n        <button type=\"submit\" class=\"btn green\" @click=\"login\">Entrar</button>\n\n         <loading :active.sync=\"isLoading\" \n        :can-cancel=\"false\" \n        :on-cancel=\"() => {}\"\n        :is-full-page=\"fullPage\"\n        :loader=\"'dots'\"\n        :color=\"'#38ef7d'\"></loading>\n    </div>\n</template>\n\n<script>\n    import api from '../services/api'\n    import Loading from 'vue-loading-overlay'\n    import 'vue-loading-overlay/dist/vue-loading.css'\n    export default {\n        name: 'Login',\n        components: {\n                Loading\n        },\n        data() {\n            return {\n                fullPage: true,\n                isLoading: false,\n                email: \"\",\n                password: \"\",\n                response: \"\",\n                error: false,\n            }\n        },\n        methods: {\n            async login() {\n                const auth_user = {\n                    email: this.email,\n                    password: this.password\n                }\n                const data = Object.entries(auth_user)\n                .map(([key, val]) => `${key}=${encodeURIComponent(val)}`)\n                .join(\"&\");\n                \n                if(this.email != '' && this.password != '') {   \n                    this.isLoading = true;  \n                    await api.post(`/auth`, data)\n                    .then(res =>  (this.response = res.data))\n                    .catch(err => console.log(err));  \n                    this.isLoading = false;\n                    if (!this.response.error) {\n                        localStorage.setItem('user_id', this.response.user._id);\n                        localStorage.setItem('token', this.response.token);\n                        //window.location.href = \"http://localhost:8080/aulas\";\n                        window.location.href = \"/aulas\";\n                    }\n                    \n                    //console.log(this.response);    \n                } else {\n                   this.error = true;\n                }              \n            },\n        },\n    }\n</script>\n\n<style scoped>\n    #login {\n        max-width: 500px;\n        border: 1px solid #CCCCCC;\n        background-color: #FFFFFF;\n        margin: auto;\n        margin-top: 30px;\n        padding: 20px;\n    }\n    \n    .green {\n        background-color: #38ef7d;\n        color: #ffffff;\n        font-weight: bold;\n    }\n</style>"]}]}